// Code generated by MockGen. DO NOT EDIT.
// Source: item.go
//
// Generated by this command:
//
//	mockgen -source=item.go -destination=mock/item.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	dto "github.com/8soat-grupo35/fastfood-order/internal/adapters/dto"
	entities "github.com/8soat-grupo35/fastfood-order/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockItemUseCase is a mock of ItemUseCase interface.
type MockItemUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockItemUseCaseMockRecorder
	isgomock struct{}
}

// MockItemUseCaseMockRecorder is the mock recorder for MockItemUseCase.
type MockItemUseCaseMockRecorder struct {
	mock *MockItemUseCase
}

// NewMockItemUseCase creates a new mock instance.
func NewMockItemUseCase(ctrl *gomock.Controller) *MockItemUseCase {
	mock := &MockItemUseCase{ctrl: ctrl}
	mock.recorder = &MockItemUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemUseCase) EXPECT() *MockItemUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemUseCase) Create(item dto.ItemDto) (*entities.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", item)
	ret0, _ := ret[0].(*entities.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockItemUseCaseMockRecorder) Create(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemUseCase)(nil).Create), item)
}

// Delete mocks base method.
func (m *MockItemUseCase) Delete(itemId uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemUseCaseMockRecorder) Delete(itemId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemUseCase)(nil).Delete), itemId)
}

// GetAll mocks base method.
func (m *MockItemUseCase) GetAll(category string) ([]entities.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", category)
	ret0, _ := ret[0].([]entities.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockItemUseCaseMockRecorder) GetAll(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockItemUseCase)(nil).GetAll), category)
}

// Update mocks base method.
func (m *MockItemUseCase) Update(itemId uint32, item dto.ItemDto) (*entities.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", itemId, item)
	ret0, _ := ret[0].(*entities.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockItemUseCaseMockRecorder) Update(itemId, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemUseCase)(nil).Update), itemId, item)
}
