// Code generated by MockGen. DO NOT EDIT.
// Source: order_payment.go
//
// Generated by this command:
//
//	mockgen -source=order_payment.go -destination=mock/order_payment.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	entities "github.com/8soat-grupo35/fastfood-order/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderPaymentUseCase is a mock of OrderPaymentUseCase interface.
type MockOrderPaymentUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOrderPaymentUseCaseMockRecorder
	isgomock struct{}
}

// MockOrderPaymentUseCaseMockRecorder is the mock recorder for MockOrderPaymentUseCase.
type MockOrderPaymentUseCaseMockRecorder struct {
	mock *MockOrderPaymentUseCase
}

// NewMockOrderPaymentUseCase creates a new mock instance.
func NewMockOrderPaymentUseCase(ctrl *gomock.Controller) *MockOrderPaymentUseCase {
	mock := &MockOrderPaymentUseCase{ctrl: ctrl}
	mock.recorder = &MockOrderPaymentUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderPaymentUseCase) EXPECT() *MockOrderPaymentUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderPaymentUseCase) Create(order entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderPaymentUseCaseMockRecorder) Create(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderPaymentUseCase)(nil).Create), order)
}
