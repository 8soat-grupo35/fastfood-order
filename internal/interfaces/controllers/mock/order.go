// Code generated by MockGen. DO NOT EDIT.
// Source: order.go
//
// Generated by this command:
//
//	mockgen -source=order.go -destination=mock/order.go
//

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	dto "github.com/8soat-grupo35/fastfood-order/internal/adapters/dto"
	entities "github.com/8soat-grupo35/fastfood-order/internal/entities"
	presenters "github.com/8soat-grupo35/fastfood-order/internal/presenters"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderController is a mock of OrderController interface.
type MockOrderController struct {
	ctrl     *gomock.Controller
	recorder *MockOrderControllerMockRecorder
	isgomock struct{}
}

// MockOrderControllerMockRecorder is the mock recorder for MockOrderController.
type MockOrderControllerMockRecorder struct {
	mock *MockOrderController
}

// NewMockOrderController creates a new mock instance.
func NewMockOrderController(ctrl *gomock.Controller) *MockOrderController {
	mock := &MockOrderController{ctrl: ctrl}
	mock.recorder = &MockOrderControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderController) EXPECT() *MockOrderControllerMockRecorder {
	return m.recorder
}

// Checkout mocks base method.
func (m *MockOrderController) Checkout(orderDto dto.OrderDto) (*presenters.OrderPresenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", orderDto)
	ret0, _ := ret[0].(*presenters.OrderPresenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkout indicates an expected call of Checkout.
func (mr *MockOrderControllerMockRecorder) Checkout(orderDto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockOrderController)(nil).Checkout), orderDto)
}

// GetAll mocks base method.
func (m *MockOrderController) GetAll() ([]entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockOrderControllerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrderController)(nil).GetAll))
}

// UpdateStatus mocks base method.
func (m *MockOrderController) UpdateStatus(id uint32, status string) (*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", id, status)
	ret0, _ := ret[0].(*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockOrderControllerMockRecorder) UpdateStatus(id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockOrderController)(nil).UpdateStatus), id, status)
}
