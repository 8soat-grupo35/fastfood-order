// Code generated by MockGen. DO NOT EDIT.
// Source: item.go
//
// Generated by this command:
//
//	mockgen -source=item.go -destination=mock/item.go
//

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	dto "github.com/8soat-grupo35/fastfood-order/internal/adapters/dto"
	entities "github.com/8soat-grupo35/fastfood-order/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockItemController is a mock of ItemController interface.
type MockItemController struct {
	ctrl     *gomock.Controller
	recorder *MockItemControllerMockRecorder
	isgomock struct{}
}

// MockItemControllerMockRecorder is the mock recorder for MockItemController.
type MockItemControllerMockRecorder struct {
	mock *MockItemController
}

// NewMockItemController creates a new mock instance.
func NewMockItemController(ctrl *gomock.Controller) *MockItemController {
	mock := &MockItemController{ctrl: ctrl}
	mock.recorder = &MockItemControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemController) EXPECT() *MockItemControllerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemController) Create(itemDto dto.ItemDto) (*entities.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", itemDto)
	ret0, _ := ret[0].(*entities.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockItemControllerMockRecorder) Create(itemDto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemController)(nil).Create), itemDto)
}

// Delete mocks base method.
func (m *MockItemController) Delete(itemId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemControllerMockRecorder) Delete(itemId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemController)(nil).Delete), itemId)
}

// GetAllByCategory mocks base method.
func (m *MockItemController) GetAllByCategory(category string) ([]entities.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByCategory", category)
	ret0, _ := ret[0].([]entities.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByCategory indicates an expected call of GetAllByCategory.
func (mr *MockItemControllerMockRecorder) GetAllByCategory(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByCategory", reflect.TypeOf((*MockItemController)(nil).GetAllByCategory), category)
}

// Update mocks base method.
func (m *MockItemController) Update(itemId int, itemDto dto.ItemDto) (*entities.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", itemId, itemDto)
	ret0, _ := ret[0].(*entities.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockItemControllerMockRecorder) Update(itemId, itemDto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemController)(nil).Update), itemId, itemDto)
}
