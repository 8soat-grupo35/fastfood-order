// Code generated by MockGen. DO NOT EDIT.
// Source: customer.go
//
// Generated by this command:
//
//	mockgen -source=customer.go -destination=mock/customer.go
//

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	dto "github.com/8soat-grupo35/fastfood-order/internal/adapters/dto"
	entities "github.com/8soat-grupo35/fastfood-order/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerController is a mock of CustomerController interface.
type MockCustomerController struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerControllerMockRecorder
	isgomock struct{}
}

// MockCustomerControllerMockRecorder is the mock recorder for MockCustomerController.
type MockCustomerControllerMockRecorder struct {
	mock *MockCustomerController
}

// NewMockCustomerController creates a new mock instance.
func NewMockCustomerController(ctrl *gomock.Controller) *MockCustomerController {
	mock := &MockCustomerController{ctrl: ctrl}
	mock.recorder = &MockCustomerControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerController) EXPECT() *MockCustomerControllerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerController) Create(arg0 dto.CustomerDto) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCustomerControllerMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerController)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockCustomerController) Delete(customerId uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", customerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerControllerMockRecorder) Delete(customerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerController)(nil).Delete), customerId)
}

// GetAll mocks base method.
func (m *MockCustomerController) GetAll() ([]entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCustomerControllerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCustomerController)(nil).GetAll))
}

// GetByCpf mocks base method.
func (m *MockCustomerController) GetByCpf(cpf string) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCpf", cpf)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCpf indicates an expected call of GetByCpf.
func (mr *MockCustomerControllerMockRecorder) GetByCpf(cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCpf", reflect.TypeOf((*MockCustomerController)(nil).GetByCpf), cpf)
}

// Update mocks base method.
func (m *MockCustomerController) Update(customerId uint32, customer dto.CustomerDto) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", customerId, customer)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCustomerControllerMockRecorder) Update(customerId, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerController)(nil).Update), customerId, customer)
}
