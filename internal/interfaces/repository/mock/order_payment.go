// Code generated by MockGen. DO NOT EDIT.
// Source: order_payment.go
//
// Generated by this command:
//
//	mockgen -source=order_payment.go -destination=mock/order_payment.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	dto "github.com/8soat-grupo35/fastfood-order/internal/adapters/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderPaymentRepository is a mock of OrderPaymentRepository interface.
type MockOrderPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderPaymentRepositoryMockRecorder
	isgomock struct{}
}

// MockOrderPaymentRepositoryMockRecorder is the mock recorder for MockOrderPaymentRepository.
type MockOrderPaymentRepositoryMockRecorder struct {
	mock *MockOrderPaymentRepository
}

// NewMockOrderPaymentRepository creates a new mock instance.
func NewMockOrderPaymentRepository(ctrl *gomock.Controller) *MockOrderPaymentRepository {
	mock := &MockOrderPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockOrderPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderPaymentRepository) EXPECT() *MockOrderPaymentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderPaymentRepository) Create(orderPayment dto.OrderPaymentDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", orderPayment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderPaymentRepositoryMockRecorder) Create(orderPayment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderPaymentRepository)(nil).Create), orderPayment)
}
